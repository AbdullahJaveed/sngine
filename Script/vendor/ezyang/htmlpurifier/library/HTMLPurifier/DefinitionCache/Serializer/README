This is a dummy file to prevent Git from ignoring this empty directory.

    vim: et sw=4 sts=4

this is the readme file here

# How to run this project locally on macOS (quick steps)

cd "/Users/abd/Documents/pixels projects/codecanyon-Bej8q8Al-sngine-the-ultimate-social-network-platform"

# 1) Start required services
brew services start mysql

# 2) Install dependencies
[ -f composer.json ] && composer install --no-interaction --prefer-dist
[ -f package.json ] && npm install

# 3) Environment/config
[ -f .env.example ] && cp .env.example .env
# edit .env and set DB credentials:
# nano .env

# 4) Database
mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS sngine_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
# if there is an SQL dump:
# mysql -u root -p sngine_db < path/to/install.sql

# 5) Permissions (adjust paths as needed)
chmod -R 755 storage uploads || true

# 6) Build assets and start server
[ -f package.json ] && npm run dev
# If the project has a public/ folder
php -S localhost:8000 -t public
# or follow the project's README/start instructions

# Troubleshoot
brew --version; php -v; mysql --version; node -v; composer --version
tail -f storage/logs/*.log 2>/dev/null || true

# MySQL root password — what to expect and quick commands

- During the macOS DMG installer: the GUI asks you to enter a password for the "root" user — you choose it (there is no preset).
- If you installed via Homebrew: MySQL often starts with no root password; run mysql_secure_installation to set one.

Quick connect (after installer):
mysql -u root -p
# Enter the password you set when prompted.

Set or change root password (when you know the current password) — MySQL 8+:
mysql -u root -p -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'YourNewStrongPassw0rd!'; FLUSH PRIVILEGES;"

Run mysql_secure_installation (recommended):
mysql_secure_installation

Reset root password if forgotten (brief safe method):
1) Stop MySQL:
brew services stop mysql   # or use the system preference if installed from dmg
2) Start MySQL with skip-grant-tables (temporary insecure mode):
sudo mysqld_safe --skip-grant-tables &
3) In another terminal:
mysql -u root
mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassw0rd!';
mysql> FLUSH PRIVILEGES;
4) Stop the insecure server and start MySQL normally.

Create a dedicated DB user for the project (recommended):
mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS sngine_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS 'sngine'@'localhost' IDENTIFIED BY 'AppUserStrongPass1!';
GRANT ALL PRIVILEGES ON sngine_db.* TO 'sngine'@'localhost';
FLUSH PRIVILEGES;"

Update your project .env (or config) with the new app user:
# DB_USERNAME=sngine
# DB_PASSWORD=AppUserStrongPass1!

Security tips
- Do not use root for app connections in production or development if you can avoid it.
- Use a password manager to store the root and app user passwords.
- Use mysql_secure_installation to remove anonymous users, disable remote root login, and remove test DB.

# Run now — quick commands to check MySQL (copy & paste)

# 1) Is the mysql client present and its version?
which mysql
mysql --version

# 2) Is the server running (Homebrew-managed)?
brew services list | grep mysql || true

# 3) Is mysqld process up and port 3306 listening?
ps aux | grep [m]ysqld || true
lsof -iTCP:3306 -sTCP:LISTEN || true

# 4) Try connecting (replace password when prompted)
# If root has a password:
mysql -u root -p -e "SELECT VERSION();"
# If you created an app user:
# mysql -u sngine -p -D sngine_db -e "SELECT 1;"

# 5) Quick admin check
mysqladmin -u root -p version

# If any command reports "command not found" or server not started:
# Install and start via Homebrew:
# brew install mysql
# brew services start mysql
# Then re-run the checks above.

# Troubleshoot: "zsh: command not found: mysql"

# 1) Quick checks (copy & paste)
which brew
brew --prefix
echo $PATH

# 2) Locate mysql binary (common locations)
ls -l "$(brew --prefix)/bin/mysql" || true
ls -l /opt/homebrew/bin/mysql || true
ls -l /usr/local/bin/mysql || true
ls -l /usr/local/mysql/bin/mysql || true

# 3) If the binary exists but is not in PATH, add it to your zsh config:
# Replace $(brew --prefix) below with the output of `brew --prefix` if needed.
echo 'export PATH="$(brew --prefix)/bin:$PATH"' >> ~/.zshrc
source ~/.zshrc
# Then verify:
which mysql
mysql --version

# 4) If installed via Homebrew but not linked, link it:
brew link mysql --force --overwrite || true
# then:
which mysql
mysql --version

# 5) If installed via Oracle DMG and binary is in /usr/local/mysql/bin, add that:
echo 'export PATH="/usr/local/mysql/bin:$PATH"' >> ~/.zshrc
source ~/.zshrc
which mysql
mysql --version

# 6) If still not found, re-run the installer or reinstall via Homebrew:
brew reinstall mysql
brew services start mysql

# Expected result:
# which mysql  -> prints path to mysql (e.g. /opt/homebrew/bin/mysql)
# mysql --version -> prints MySQL version (e.g. Ver 8.0.x)

# Note: after changing ~/.zshrc you can run `exec zsh` or `source ~/.zshrc` to apply changes immediately.

# Next steps — run the project now (copy & paste from project root)

cd "/Users/abd/Documents/pixels projects/codecanyon-Bej8q8Al-sngine-the-ultimate-social-network-platform"

# 1) PHP deps
[ -f composer.json ] && composer install --no-interaction --prefer-dist

# 2) Node deps and build (if package.json exists)
[ -f package.json ] && npm install
[ -f package.json ] && npm run dev || true

# 3) Environment file — edit values (DB, APP_URL, etc.)
[ -f .env.example ] && cp .env.example .env
# Edit .env with your editor and set DB credentials:
# nano .env   (or use VS Code / TextEdit)

# 4) Create DB and app user (replace passwords)
# If using root:
mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS sngine_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
# Create app user:
mysql -u root -p -e "CREATE USER IF NOT EXISTS 'sngine'@'localhost' IDENTIFIED BY 'AppUserStrongPass1!'; GRANT ALL PRIVILEGES ON sngine_db.* TO 'sngine'@'localhost'; FLUSH PRIVILEGES;"

# 5) Import SQL dump if provided
# mysql -u sngine -p sngine_db < path/to/install.sql

# 6) Permissions (adjust dirs used by this project)
chmod -R 755 storage uploads || true
# or make you the owner (safer for local dev)
sudo chown -R $(whoami):staff storage uploads || true

# 7) Start a local PHP server (adjust webroot if different)
# If project uses a public/ folder:
php -S localhost:8000 -t public
# If index.php is at project root:
# php -S localhost:8000

# 8) Open in browser
# http://localhost:8000

# 9) Quick checks if something fails
# - Check services:
brew services list
# - View MySQL status and connect:
mysql -u sngine -p -e "SELECT VERSION();"
# - Check PHP errors:
php -v
tail -n 200 storage/logs/*.log 2>/dev/null || true

# Replace usernames/passwords/paths above with values you set in .env.

# Now MySQL is set — run these (copy & paste)

cd "/Users/abd/Documents/pixels projects/codecanyon-Bej8q8Al-sngine-the-ultimate-social-network-platform"

# 1) Prepare environment
[ -f .env.example ] && cp .env.example .env
# Edit .env: set DB_DATABASE=sngine_db, DB_USERNAME=sngine, DB_PASSWORD=YourAppPass!
# e.g. nano .env

# 2) Install PHP & JS deps
[ -f composer.json ] && composer install --no-interaction --prefer-dist
[ -f package.json ] && npm install

# 3) Create DB and grant user (run once; replace password)
mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS sngine_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
mysql -u root -p -e "CREATE USER IF NOT EXISTS 'sngine'@'localhost' IDENTIFIED BY 'YourAppPass!'; GRANT ALL PRIVILEGES ON sngine_db.* TO 'sngine'@'localhost'; FLUSH PRIVILEGES;"

# 4) Import SQL dump if provided
# mysql -u sngine -p sngine_db < path/to/install.sql

# 5) Permissions (adjust dirs used by project)
chmod -R 755 storage uploads || true
sudo chown -R $(whoami):staff storage uploads || true

# 6) Build assets (optional) and start server
[ -f package.json ] && npm run dev &
# If webroot is public/:
php -S localhost:8000 -t public
# Otherwise:
# php -S localhost:8000

# 7) Open http://localhost:8000 in your browser and test
# If you see errors, paste the exact terminal output or the app error so I can help.

# Start locally now (copy/paste these commands, run from Terminal)

cd "/Users/abd/Documents/pixels projects/codecanyon-Bej8q8Al-sngine-the-ultimate-social-network-platform"

# 0) Ensure MySQL service is running (Homebrew) — enter your password if prompted
brew services start mysql
# verify:
mysql --version
ps aux | grep [m]ysqld || true

# 1) Prepare environment file (edit values after copying)
[ -f .env.example ] && cp .env.example .env
# Edit .env and set:
# DB_DATABASE=sngine_db
# DB_USERNAME=sngine
# DB_PASSWORD=YourAppPass!
# APP_URL=http://localhost:8000
nano .env

# 2) Install PHP dependencies
[ -f composer.json ] && composer install --no-interaction --prefer-dist

# 3) Install JS dependencies and build
[ -f package.json ] && npm install
[ -f package.json ] && npm run dev &

# 4) Create database and app user (run and enter root password when prompted)
mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS sngine_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
mysql -u root -p -e "CREATE USER IF NOT EXISTS 'sngine'@'localhost' IDENTIFIED BY 'YourAppPass!'; GRANT ALL PRIVILEGES ON sngine_db.* TO 'sngine'@'localhost'; FLUSH PRIVILEGES;"

# 5) Import SQL dump if present (replace path if needed)
# mysql -u sngine -p sngine_db < path/to/install.sql

# 6) Ensure writable dirs (adjust paths if different)
chmod -R 755 storage uploads || true
sudo chown -R $(whoami):staff storage uploads || true

# 7) Start PHP dev server (adjust webroot if required)
# If project uses public/ folder:
php -S localhost:8000 -t public
# Otherwise:
# php -S localhost:8000

# 8) Open browser: http://localhost:8000

# If anything fails, copy the exact terminal error output here and I will advise the next fix.

# Composer is installed at /Users/abd/composer.phar — use it now

# Quick verify:
php /Users/abd/composer.phar --version

# Option A — run Composer without installing globally (works now)
# From project root:
php /Users/abd/composer.phar install --no-interaction --prefer-dist

# Option B — make Composer a global `composer` command (recommended)
# Move to a directory in your PATH and make executable (choose one):
sudo mv /Users/abd/composer.phar /usr/local/bin/composer
sudo chmod +x /usr/local/bin/composer
# or on Apple Silicon:
# sudo mv /Users/abd/composer.phar /opt/homebrew/bin/composer
# sudo chmod +x /opt/homebrew/bin/composer

# After moving, verify:
composer --version
# Then run:
cd "/Users/abd/Documents/pixels projects/codecanyon-Bej8q8Al-sngine-the-ultimate-social-network-platform"
composer install --no-interaction --prefer-dist

# Option C — add an alias instead of moving:
echo "alias composer='php /Users/abd/composer.phar'" >> ~/.zshrc
source ~/.zshrc
composer --version

# If you get permission or PATH errors, paste the exact terminal output and I'll advise next steps.
